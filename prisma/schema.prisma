// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Baris ini penting untuk deployment di Vercel
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -- MODELS --

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(KASIR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  transactions Transaction[]
  activities   UserActivity[]
  drumSales    DrumSale[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Product {
  id              String    @id @default(cuid())
  name            String    @unique
  unit            String
  categoryId      String
  buyPrice        Decimal
  sellPrice       Decimal
  stock           Int       @default(0)
  minStock        Int       @default(5)
  expiredDate     DateTime?
  description     String?
  imageUrl        String?
  isActive        Boolean   @default(true)
  isDrum          Boolean   @default(false)
  initialVolumeMl Int?
  currentVolumeMl Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  category         Category          @relation(fields: [categoryId], references: [id])
  stockMovements   StockMovement[]
  transactionItems TransactionItem[]
  purchaseItems    PurchaseItem[]
  drumSales        DrumSale[]
}

model DrumSale {
  id             String   @id @default(cuid())
  transactionId  String
  productId      String
  quantitySoldMl Int
  salePrice      Decimal
  notes          String?
  createdAt      DateTime @default(now())
  userId         String

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])
}

model StockMovement {
  id        String            @id @default(cuid())
  productId String
  type      StockMovementType
  quantity  Int
  notes     String?
  createdAt DateTime          @default(now())
  product   Product           @relation(fields: [productId], references: [id])
}

model Transaction {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  userId        String
  totalAmount   Decimal
  paidAmount    Decimal
  changeAmount  Decimal       @default(0)
  paymentMethod PaymentMethod
  discount      Decimal       @default(0)
  notes         String?
  createdAt     DateTime      @default(now())

  user      User              @relation(fields: [userId], references: [id])
  items     TransactionItem[]
  drumSales DrumSale[]
}

model TransactionItem {
  id            String      @id @default(cuid())
  transactionId String
  productId     String
  quantity      Int
  price         Decimal
  subtotal      Decimal
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
}

model Supplier {
  id        String     @id @default(cuid())
  name      String     @unique
  contact   String
  email     String?    @unique
  address   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[]
}

model Purchase {
  id          String         @id @default(cuid())
  supplierId  String
  totalAmount Decimal
  status      PurchaseStatus @default(PENDING)
  notes       String?
  createdAt   DateTime       @default(now())
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  items       PurchaseItem[]
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  price      Decimal
  subtotal   Decimal
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// -- ENUMS --
enum Role {
  ADMIN
  MANAGER
  KASIR
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

enum PaymentMethod {
  Tunai
  QRIS
  TransferBank
  Kredit
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
}